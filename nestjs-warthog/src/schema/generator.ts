import * as prettier from 'prettier'
import { EntityMetadata } from 'typeorm'

import {
  entityToWhereInput,
  entityToWhereUniqueInput,
  entityToCreateInput,
  entityToUpdateInput,
} from './entity-to-inputs'
import { entityToOrderByEnum } from './entity-to-enum'
import {
  entityToFindArgs,
  entityToCreateManyArgs,
  entityToUpdateArgs,
  entityToFindOneArgs,
  entityToCreateArgs,
  entityToDeleteManyArgs,
  entityToDeleteArgs,
  entityToUpdateManyArgs,
} from './entity-to-args'

export class SchemaGenerator {
  static generate(entities: EntityMetadata[]): string {
    let template = `
      // This file has been auto-generated by Warthog.  Do not update directly as it
      // will be re-written.

      import { ArgsType, Field, Float, InputType, Int } from 'type-graphql';
      import { registerEnumType } from 'type-graphql';

      import { PaginationArgs } from 'nestjs-warthog';

      `

    // is it necessary?
    // ${generateEnumMapImports().join('')}

    entities.forEach((entity: EntityMetadata) => {
      template += `
        // Enums

        ${entityToOrderByEnum(entity)}

        // Inputs

        ${entityToWhereInput(entity)}
        ${entityToWhereUniqueInput(entity)}
        ${entityToCreateInput(entity)}
        ${entityToUpdateInput(entity)}

        // Args

        ${entityToFindOneArgs(entity)}
        ${entityToFindArgs(entity)}
        ${entityToCreateArgs(entity)}
        ${entityToCreateManyArgs(entity)}
        ${entityToUpdateArgs(entity)}
        ${entityToUpdateManyArgs(entity)}
        ${entityToDeleteArgs(entity)}
        ${entityToDeleteManyArgs(entity)}
      `
    })

    return this.format(template)
  }

  static format(code: string, options: prettier.Options = {}) {
    try {
      // TODO: grab our prettier options (single quote, etc...)
      return prettier.format(code, {
        ...options,
        parser: 'typescript',
      })
    } catch (err) {
      console.log(`There is a problem with formatting: ${JSON.stringify(err)}`)
      return code
    }
  }
}
