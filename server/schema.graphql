# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthPayload {
  token_type: String!
  access_token: String!
  refresh_token: String
}

input BooleanSearchInput {
  eq: Boolean
  in: [Boolean!]
  not: Boolean
}

"""ISO8601 DateTime String (but unix timestamp will also be accepted"""
scalar Date

input DateSearchInput {
  eq: Date
  in: [Date!]
  not: Date
  lt: Date
  lte: Date
  gt: Date
  gte: Date
}

input FloatSearchInput {
  eq: Float
  in: [Float!]
  not: Float
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

input IdSearchInput {
  eq: ID
  in: [ID!]
  not: ID
}

input IntSearchInput {
  eq: Int
  in: [Int!]
  not: Float
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

type Mutation {
  login(password: String!, email: String!): AuthPayload!
  refresh(token: String!): AuthPayload!
}

type Project {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  description: String
}

input ProjectCreateInput {
  name: String!
  description: String
}

input ProjectWhereInput {
  id: IdSearchInput
  name: StringSearchInput
  description: StringSearchInput
}

input ProjectWhereUniqueInput {
  id: String!
}

type Query {
  privateString: String!
  publicString: String!
  project(where: ProjectWhereUniqueInput!): Project!
  projects(where: [ProjectWhereInput!]): [Project!]!
  user(where: UserWhereUniqueInput!): UserPublicModel
  users(where: UserWhereInput): [UserPublicModel!]!
  workspace(where: WorkspaceWhereUniqueInput!): Workspace!
  workspaces: [Workspace!]!
}

input StringSearchInput {
  eq: String
  in: [String!]
  not: String
  contains: String
  startsWith: String
  endsWith: String
}

input UserCreateInput {
  email: String!
  password: String!
  name: String
}

type UserCurrentModel {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  email: String!
  name: String
  avatarUrl: String
}

type UserPublicModel {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  email: String!
  name: String
  avatarUrl: String
}

input UserWhereInput {
  id: IdSearchInput
  email: StringSearchInput
}

input UserWhereUniqueInput {
  id: String
  email: String
}

type Workspace {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  description: String
  users: [UserPublicModel!]!
}

input WorkspaceCreateInput {
  name: String!
  description: String
}

input WorkspaceWhereUniqueInput {
  id: String
}
